{"version":3,"file":"static/js/387.5d3749f8.chunk.js","mappings":"wRAEaA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0QAYpBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qGASpBG,EAAaL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0JAWvBK,EAAcP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0F,SCxB/BO,EACE,OADFA,EAEK,UAFLA,EAGK,UAHLA,EAIG,QA4DT,EAzDa,WACX,IAAAC,GAAkCC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAA4BL,EAAAA,EAAAA,UAASF,GAAYQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEdG,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRP,EAAUV,IACVkB,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJd,EAAac,EAAKC,MAClBX,EAAUV,EACZ,IACCsB,OAAM,SAAAT,GACLP,EAAa,CAAC,GACdQ,EAASD,GACTH,EAAUV,EACZ,GACJ,GAAG,CAACe,KAGFQ,EAAAA,EAAAA,MAAA,WAAAC,SAAA,CACGf,IAAWT,GAAkBK,GAAaA,EAAUoB,OAAS,GAC5DC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAACpC,EAAQ,CAAAkC,SACNnB,EAAUsB,KACT,SAAAC,GAAA,IAAGC,EAASD,EAATC,UAAWC,EAAYF,EAAZE,aAAcC,EAAaH,EAAbG,cAAeC,EAASJ,EAATI,UAAS,OAClDT,EAAAA,EAAAA,MAAC7B,EAAQ,CAAA8B,SAAA,EACPE,EAAAA,EAAAA,KAAC9B,EAAU,CAAA4B,UACTE,EAAAA,EAAAA,KAAA,OACEO,IACEH,EAAY,GAAAI,OAzCf,mCA0CsBA,OAAGJ,GAClBK,EAENC,IAAKL,OAGTR,EAAAA,EAAAA,MAACzB,EAAW,CAAA0B,SAAA,EACVE,EAAAA,EAAAA,KAAA,MAAAF,SAAKO,KACLR,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYQ,UAbJH,EAeJ,QAMnBpB,IAAWT,IAAkB0B,EAAAA,EAAAA,KAAA,KAAAF,SAAG,wCAEjCf,IAAWT,IAAkB0B,EAAAA,EAAAA,KAACW,EAAAA,EAAM,IACpC5B,IAAWT,IAAgB0B,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAAAd,SAAEX,MAG1C,C,4CClEA,IAJc,SAAHe,GAAWA,EAALf,MACf,OAAOa,EAAAA,EAAAA,KAAA,OAAAF,SAAK,oCACd,C,iMCFAe,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAiB,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAOtC,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MAPM,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACkBZ,EAAAA,EAAAA,IAAU,mBAAoB,CACnDa,OAAQ,CACNC,QAASb,KAEV,KAAD,EAJY,OAARQ,EAAQC,EAAAK,KAAAL,EAAAM,OAAA,SAKPP,EAAS5B,KAAKoC,SAAO,wBAAAP,EAAAQ,OAAA,GAAAV,EAAA,MAC7BJ,MAAA,KAAAC,UAAA,CAEM,SAAec,EAAeC,GAAA,OAAAC,EAAAjB,MAAC,KAADC,UAAA,CAOpC,SAAAgB,IAAA,OAAAA,GAAAf,EAAAA,EAAAA,GAAAC,IAAAA,MAPM,SAAAe,EAA+B9C,GAAO,IAAAiC,EAAA,OAAAF,IAAAA,MAAA,SAAAgB,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cAAAW,EAAAX,KAAA,EACpBZ,EAAAA,EAAAA,IAAU,SAADL,OAAUnB,GAAW,CACnDqC,OAAQ,CACNC,QAASb,KAEV,KAAD,EAJY,OAARQ,EAAQc,EAAAR,KAAAQ,EAAAP,OAAA,SAKPP,EAAS5B,MAAI,wBAAA0C,EAAAL,OAAA,GAAAI,EAAA,MACrBlB,MAAA,KAAAC,UAAA,CAEM,SAAemB,EAAcC,GAAA,OAAAC,EAAAtB,MAAC,KAADC,UAAA,CAQnC,SAAAqB,IAAA,OAAAA,GAAApB,EAAAA,EAAAA,GAAAC,IAAAA,MARM,SAAAoB,EAA8BC,GAAK,IAAAnB,EAAA,OAAAF,IAAAA,MAAA,SAAAsB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAjB,KAAA,EACjBZ,EAAAA,EAAAA,IAAU,eAAgB,CAC/Ca,OAAQ,CACNC,QAASb,EACT2B,MAAOA,KAER,KAAD,EALY,OAARnB,EAAQoB,EAAAd,KAAAc,EAAAb,OAAA,SAMPP,EAAS5B,KAAKoC,SAAO,wBAAAY,EAAAX,OAAA,GAAAS,EAAA,MAC7BvB,MAAA,KAAAC,UAAA,CACM,SAAe1B,EAAemD,GAAA,OAAAC,EAAA3B,MAAC,KAADC,UAAA,CAQpC,SAAA0B,IAAA,OAAAA,GAAAzB,EAAAA,EAAAA,GAAAC,IAAAA,MARM,SAAAyB,EAA+BxD,GAAO,IAAAiC,EAAA,OAAAF,IAAAA,MAAA,SAAA0B,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAArB,KAAA,EACpBZ,EAAAA,EAAAA,IAAU,SAADL,OAAUnB,EAAO,YAAY,CAC3DqC,OAAQ,CACNC,QAASb,EACTiC,SAAU,WAEX,KAAD,EALY,OAARzB,EAAQwB,EAAAlB,KAAAkB,EAAAjB,OAAA,SAMPP,EAAS5B,MAAI,wBAAAoD,EAAAf,OAAA,GAAAc,EAAA,MACrB5B,MAAA,KAAAC,UAAA,CAEM,SAAe8B,EAAcC,GAAA,OAAAC,EAAAjC,MAAC,KAADC,UAAA,CAOnC,SAAAgC,IAAA,OAAAA,GAAA/B,EAAAA,EAAAA,GAAAC,IAAAA,MAPM,SAAA+B,EAA8B9D,GAAO,IAAAiC,EAAA,OAAAF,IAAAA,MAAA,SAAAgC,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA3B,KAAA,EACnBZ,EAAAA,EAAAA,IAAU,SAADL,OAAUnB,EAAO,YAAY,CAC3DqC,OAAQ,CACNC,QAASb,KAEV,KAAD,EAJY,OAARQ,EAAQ8B,EAAAxB,KAAAwB,EAAAvB,OAAA,SAKPP,EAAS5B,MAAI,wBAAA0D,EAAArB,OAAA,GAAAoB,EAAA,MACrBlC,MAAA,KAAAC,UAAA,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Error/Error.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 12px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const CastItem = styled.li`\n  border-radius: 6px;\n  width: 100%;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n  }\n`;\n\nexport const ImgWrapper = styled.div`\n  border-radius: 10px;\n  overflow: hidden;\n  position: relative;\n  height: 300px;\n  > img {\n    object-fit: cover;\n    width: 100%;\n  }\n`;\n\nexport const InfoWrapper = styled.div`\n  margin-top: 10px;\n  font-size: 18px;\n  padding: 10px;\n  overflow: hidden;\n`;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../services/moviesAPI';\nimport { Loader } from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\nimport deafaultImg from '../../images/default-image.png';\nimport { CastItem, CastList, ImgWrapper, InfoWrapper } from './Cast.styled';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Status = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  RESOLVE: 'resolve',\n  ERROR: 'error',\n};\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState();\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus(Status.LOADING);\n    getMovieCredits(movieId)\n      .then(data => {\n        setMovieCast(data.cast);\n        setStatus(Status.RESOLVE);\n      })\n      .catch(error => {\n        setMovieCast({});\n        setError(error);\n        setStatus(Status.ERROR);\n      });\n  }, [movieId]);\n\n  return (\n    <section>\n      {status === Status.RESOLVE && movieCast && movieCast.length > 0 ? (\n        <div>\n          <CastList>\n            {movieCast.map(\n              ({ credit_id, profile_path, original_name, character }) => (\n                <CastItem key={credit_id}>\n                  <ImgWrapper>\n                    <img\n                      src={\n                        profile_path\n                          ? `${BASE_IMG_URL}${profile_path}`\n                          : deafaultImg\n                      }\n                      alt={original_name}\n                    />\n                  </ImgWrapper>\n                  <InfoWrapper>\n                    <h4>{original_name}</h4>\n                    <p>Character: {character}</p>\n                  </InfoWrapper>\n                </CastItem>\n              )\n            )}\n          </CastList>\n        </div>\n      ) : (\n        status !== Status.LOADING && <p>Sorry, there isn't any actors' info</p>\n      )}\n      {status === Status.LOADING && <Loader />}\n      {status === Status.ERROR && <Error>{error}</Error>}\n    </section>\n  );\n};\n\nexport default Cast;","import React from 'react';\n\nconst Error = ({ error }) => {\n  return <div>'Sorry, something went wrong :('</div>;\n};\n\nexport default Error;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a56a1677bac2a6664dd2ad898620a49c';\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('trending/all/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function getMovieSearch(query) {\n  const response = await axios.get(`search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n  return response.data.results;\n}\nexport async function getMovieCredits(movieId) {\n  const response = await axios.get(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n}\n\nexport async function getMovieReview(movieId) {\n  const response = await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastItem","_templateObject2","ImgWrapper","_templateObject3","InfoWrapper","_templateObject4","Status","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","_useState4","status","setStatus","_useState5","_useState6","error","setError","movieId","useParams","useEffect","getMovieCredits","then","data","cast","catch","_jsxs","children","length","_jsx","map","_ref","credit_id","profile_path","original_name","character","src","concat","deafaultImg","alt","Loader","Error","axios","API_KEY","getTrendingMovies","_getTrendingMovies","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","params","api_key","sent","abrupt","results","stop","getMovieDetails","_x","_getMovieDetails","_callee2","_context2","getMovieSearch","_x2","_getMovieSearch","_callee3","query","_context3","_x3","_getMovieCredits","_callee4","_context4","language","getMovieReview","_x4","_getMovieReview","_callee5","_context5"],"sourceRoot":""}